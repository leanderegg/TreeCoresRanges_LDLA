flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
trouble <- "11C-A"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
trouble <- "11C-B"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
spstdat.rwl.df <- crossdate(data=data)
trouble <- "11C-A"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
trouble <- "11C-B"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
trouble <- "11N-A"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
trouble <- "11N-B"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
spstdat.rwl.df <- crossdate(data=data)
spstdat.rwl.df <- crossdate(data=data)
trouble <- "11C-A"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
trouble <- "11C-B"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
trouble <- "11N-A"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
trouble <- "11N-B"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
trouble <- "12N-A"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
trouble <- "12N-B"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
data <- read.csv(csv, header=TRUE)
spstdat.rwl.df <- crossdate(data=data)
trouble <- "12N-A"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
trouble <- "12C-A"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
trouble <- "12C-B"
# code that pulls out the individual core to analyze against the rest of the data set
k <- which(colnames(spstdat.rwl.df) == trouble) #input core of interest
flagtree<-colnames(spstdat.rwl.df)[k]
flagged=spstdat.rwl.df[,k]
names(flagged)=rownames(spstdat.rwl.df)
spstdat.rwl.df[,k]=NULL
# shows line graph of where correlation breaks down
seg.20<-corr.series.seg(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10, main=paste(flagtree))#you may want to look at these line plots, but they use up too many windows if you are doing it for a whole stand
# shows ball and stick diagram that highlights additional or missing rings
ccf20=ccf.series.rwl(rwl=spstdat.rwl.df,series=flagged,seg.length=20,bin.floor=10,main=paste(trouble))
spstdat.rwl.df <- crossdate(data=data)
quartz(width=6, height=4)
par(mfrow=c(1,2), mar=c(3.5,3.5,0,0), oma=c(0,0,1,1))
levels(POTRinfo$Band) <- list(L="L", M="M", H="H")
boxplot(BAI10yr~Band, POTRinfo)
barplot(height = POTRmeans)
plot(PIPO_radius[1,], ylim=c(0,max(PIPO_radius[,1])), type="l")
for(i in 2:nrow(PIPO_radius)){
lines(PIPO_radius[i,])
}
abline(h=130)
cols <- brewer.pal()
pal[3] <- brewer.pal(n=3, "Set1")[3]
require(RColorBrewer)
cols <- brewer.pal()
pal[3] <- brewer.pal(n=3, "Set1")[3]
plot(PIPO_BAI[which(PIPOinfo$Band=="L"),]~PIPO_radius[which(PIPOinfo$Band=="L"),], col=pal[2], pch=16, cex=.4)
points(PIPO_BAI[which(PIPOinfo$Band=="M"),]~PIPO_radius[which(PIPOinfo$Band=="M"),], col=pal[3], pch=16, cex=.4)
points(PIPO_BAI[which(PIPOinfo$Band=="H"),]~PIPO_radius[which(PIPOinfo$Band=="H"),], col=pal[1], pch=16, cex=.4)
lines(lowess(PIPO_BAI[which(PIPOinfo$Band=="H"),]~PIPO_radius[which(PIPOinfo$Band=="H"),]))
lines(lowess(y=PIPO_BAI[which(PIPOinfo$Band=="H"),], x=PIPO_radius[which(PIPOinfo$Band=="H"),]))
lines(lowess(y=PIPO_BAI[which(PIPOinfo$Band=="H"),], x=PIPO_radius[which(PIPOinfo$Band=="H"),],delta=2))
lines(lowess(y=PIPO_BAI[which(PIPOinfo$Band=="H"),], x=PIPO_radius[which(PIPOinfo$Band=="H"),],delta=20))
lines(lowess(y=PIPO_BAI[which(PIPOinfo$Band=="H"),], x=PIPO_radius[which(PIPOinfo$Band=="H"),],delta=50))
lines(lowess(y=PIPO_BAI[which(PIPOinfo$Band=="H"),], x=PIPO_radius[which(PIPOinfo$Band=="H"),],delta=100))
lines(ksmooth(y=PIPO_BAI[which(PIPOinfo$Band=="H"),], x=PIPO_radius[which(PIPOinfo$Band=="H"),]))
lines(ksmooth(y=PIPO_BAI[which(PIPOinfo$Band=="H"),], x=PIPO_radius[which(PIPOinfo$Band=="H"),], "normal", bandwidth=.5))
lines(ksmooth(y=PIPO_BAI[which(PIPOinfo$Band=="H"),], x=PIPO_radius[which(PIPOinfo$Band=="H"),], "normal", bandwidth=.5, range.x = c(0,225)))
lines(ksmooth(y=PIPO_BAI[which(PIPOinfo$Band=="H"),], x=PIPO_radius[which(PIPOinfo$Band=="H"),], "normal", range.x = c(0,225)))
lines(ksmooth(y=PIPO_BAI[which(PIPOinfo$Band=="H"),], x=PIPO_radius[which(PIPOinfo$Band=="H"),], "normal", bandwidth=.9,range.x = c(0,225)))
plot(PIPO_BAI[which(PIPOinfo$Band=="L"),]~PIPO_radius[which(PIPOinfo$Band=="L"),], col=pal[2], pch=16, cex=.4)
points(PIPO_BAI[which(PIPOinfo$Band=="M"),]~PIPO_radius[which(PIPOinfo$Band=="M"),], col=pal[3], pch=16, cex=.4)
points(PIPO_BAI[which(PIPOinfo$Band=="H"),]~PIPO_radius[which(PIPOinfo$Band=="H"),], col=pal[1], pch=16, cex=.4)
lines(ksmooth(y=PIPO_BAI[which(PIPOinfo$Band=="H"),], x=PIPO_radius[which(PIPOinfo$Band=="H"),], "normal", bandwidth=20,range.x = c(0,225)))
lines(ksmooth(y=PIPO_BAI[which(PIPOinfo$Band=="H"),], x=PIPO_radius[which(PIPOinfo$Band=="H"),], "normal", bandwidth=10,range.x = c(0,225)))
300*20/5
30*15
8*10.2
9*10.2
450/9
50*.102
450*.102*.102
450*.13*.13
45*.13
10*.13
15*40
600*.102*.102
plot(POTR_BAI[which(POTRinfo$Band=="L"&POTRinfo$Comp=="H"),]~POTR_radius[which(POTRinfo$Band=="L"&POTRinfo$Comp=="H"),], col=pal[2], pch=pch, cex=.4, ylim=c(0,4500), ylab="Basal Area Increment", xlab="Radius (cm)")
points(POTR_BAI[which(POTRinfo$Band=="M"&POTRinfo$Comp=="H"),]~POTR_radius[which(POTRinfo$Band=="M"&POTRinfo$Comp=="H"),], col=pal[3], pch=pch, cex=.4)
points(POTR_BAI[which(POTRinfo$Band=="H"&POTRinfo$Comp=="H"),]~POTR_radius[which(POTRinfo$Band=="H"&POTRinfo$Comp=="H"),], col=pal[1], pch=pch, cex=.4)
600*.13*.13
plot(POTR_BAI[which(POTRinfo$Band=="L"&POTRinfo$Comp=="L"),]~POTR_radius[which(POTRinfo$Band=="L"&POTRinfo$Comp=="L"),], col=pal[2], pch=pch, cex=.4, ylim=c(0,4500), ylab="Basal Area Increment", xlab="Radius (cm)")
points(POTR_BAI[which(POTRinfo$Band=="M"&POTRinfo$Comp=="L"),]~POTR_radius[which(POTRinfo$Band=="M"&POTRinfo$Comp=="L"),], col=pal[3], pch=pch, cex=.4)
points(POTR_BAI[which(POTRinfo$Band=="H"&POTRinfo$Comp=="L"),]~POTR_radius[which(POTRinfo$Band=="H"&POTRinfo$Comp=="L"),], col=pal[1], pch=pch, cex=.4)
plot(POTR_BAI[which(POTRinfo$Band=="L"&POTRinfo$Comp=="H"),]~POTR_radius[which(POTRinfo$Band=="L"&POTRinfo$Comp=="H"),], col=pal[2], pch=pch, cex=.4, ylim=c(0,4500), ylab="Basal Area Increment", xlab="Radius (cm)")
points(POTR_BAI[which(POTRinfo$Band=="M"&POTRinfo$Comp=="H"),]~POTR_radius[which(POTRinfo$Band=="M"&POTRinfo$Comp=="H"),], col=pal[3], pch=pch, cex=.4)
points(POTR_BAI[which(POTRinfo$Band=="H"&POTRinfo$Comp=="H"),]~POTR_radius[which(POTRinfo$Band=="H"&POTRinfo$Comp=="H"),], col=pal[1], pch=pch, cex=.4)
mtext("High Competition",side = 3)
quartz(width=6, height=4)
par(mfrow=c(1,2), mar=c(3.5,3.5,1,0), oma=c(0,0,0,1), mgp=c(2.5,1,0))
pch <- 1
# High competition
plot(PIPO_BAI[which(PIPOinfo$Band=="L"&PIPOinfo$Comp=="H"),]~PIPO_radius[which(PIPOinfo$Band=="L"&PIPOinfo$Comp=="H"),], col=pal[2], pch=pch, cex=.4, ylim=c(0,4500), ylab="Basal Area Increment", xlab="Radius (cm)")
points(PIPO_BAI[which(PIPOinfo$Band=="M"&PIPOinfo$Comp=="H"),]~PIPO_radius[which(PIPOinfo$Band=="M"&PIPOinfo$Comp=="H"),], col=pal[3], pch=pch, cex=.4)
points(PIPO_BAI[which(PIPOinfo$Band=="H"&PIPOinfo$Comp=="H"),]~PIPO_radius[which(PIPOinfo$Band=="H"&PIPOinfo$Comp=="H"),], col=pal[1], pch=pch, cex=.4)
mtext("High Competition",side = 3)
legend("topleft",legend = c("High", "Mid", "Low"),col = pal[c(1,3,2)],pch = pch, bty = "n",title = "Ponderosa")
#Low Comp
plot(PIPO_BAI[which(PIPOinfo$Band=="L"&PIPOinfo$Comp=="L"),]~PIPO_radius[which(PIPOinfo$Band=="L"&PIPOinfo$Comp=="L"),], col=pal[2], pch=pch, cex=.4, ylim=c(0,4500), ylab="Basal Area Increment", xlab="Radius (cm)")
points(PIPO_BAI[which(PIPOinfo$Band=="M"&PIPOinfo$Comp=="L"),]~PIPO_radius[which(PIPOinfo$Band=="M"&PIPOinfo$Comp=="L"),], col=pal[3], pch=pch, cex=.4)
points(PIPO_BAI[which(PIPOinfo$Band=="H"&PIPOinfo$Comp=="L"),]~PIPO_radius[which(PIPOinfo$Band=="H"&PIPOinfo$Comp=="L"),], col=pal[1], pch=pch, cex=.4)
mtext("Low Competition",side = 3)
View(ABLA_BAI)
View(ABLAinfo)
ABLA_radius <- basal_area_inc(ABLArw, DBHbark = ABLAinfo, DBHcol = 13,barkcol = 14,calBAI = FALSE)
basal_area_inc <- function(ringwidths, DBHbark, DBHcol=12, barkcol=13, calBAI=TRUE){
#make a Tag for ringwidths that works with my DBH data frame
#get the initial radius ()
radinit <- ((DBHbark[,DBHcol])/2)-DBHbark[,barkcol] # in cm
DBHbark$radinit <- radinit *10 #in mm
# order them so that they're in the same order
# DBHbark <- DBHbark[order(DBHbark$Tag),]
if(length(which(DBHbark$Tag!=ringwidths$Tag))>0){
print("order not the same in rw and tree info")
}else{
#ringwidths <- ringwidths[order(ringwidths$Tag),]
# now calculate BAI for each year
radius <- matrix(nrow=nrow(ringwidths), ncol=ncol(ringwidths)-5)
for (i in 1:(ncol(ringwidths)-5)){ #account for the first five non rw columns
if (i == 1)
radius[,i] <- DBHbark$radinit
else
radius[,i] <- radius[,(i-1)]-ringwidths[,5+i]
#print(names(ringwidths)[i+5])
# Haha! only have one negative sized tree! boo yah!
}
print(paste("Min radius", min(radius, na.rm=T)))
# ok, I've got the radii, now just need to convert to BAI
if (calBAI==FALSE){
return(radius)
}
else{
BAI <- matrix(nrow=dim(radius)[1], ncol=dim(radius)[2])
for(i in 1:(ncol(radius)-1)){ # this will return a matrix with 1 fewer column than radius
BAI[,i] <- (radius[,i]^2 *pi) - (radius[,i+1]^2 *pi)
}
return(BAI)
}
}}
tree_infoPIPO[1:3,c("Band", "Pair", "Comp","Tag","Elev", "DBH", "Bark","BA_tot","in5_tot","N_Cr")]
View(ABLA_BAI)
View(PIPO_BAI)
require(reshape)
require(reshape2)
rownames(PIPO_BAI)
?melt
test <- melt(data = PIPO_BAI,id.vars = rownames(PIPO_BAI))
View(test)
colnames(PIPO_BAI)
colnames(PIPO_radius)
colnames(PIPOrw)[c(7:ncol(PIPOrw), "X1901")]
colnames(PIPOrw)
c(7:ncol(PIPOrw), "X1901")
length(colnames(PIPOrw)[7:ncol(PIPOrw)])
colnames(PIPOrw)[7:ncol(PIPOrw)]
c(colnames(PIPOrw)[7:ncol(PIPOrw)],"X1901")
colnames(PIPO_BAI) <- c(colnames(PIPOrw)[7:ncol(PIPOrw)],"X1901") #the last year in PIPOrw = 1902
colnames(PIPO_radius) <- c(colnames(PIPOrw)[7:ncol(PIPOrw)],"X1901")
colnames(POTRrw)
c(colnames(POTRrw)[7:ncol(POTRrw)], "X1844")
colnames(POTR_BAI) <- c(colnames(POTRrw)[7:ncol(POTRrw)], "X1844") #the last year in POTRrw = 1902
colnames(POTR_radius) <- c(colnames(POTRrw)[7:ncol(POTRrw)], "X1844")
test <- melt(data = PIPO_BAI,id.vars = rownames(PIPO_BAI))
head(test)
testRad <- melt(data=PIPO_radius, id.vars=rownames(PIPO_radius))
head(testRad)
View(testRad)
tail(testRad)
rownames(PIPO_BAI) <- PIPOrw$Tag
testRad <- melt(data=PIPO_radius, id.vars=rownames(PIPO_radius))
tail(testRad)
rownames(PIPO_radius)
rownames(PIPO_radius) <- PIPOrw$Tag
testRad <- melt(data=PIPO_radius, id.vars=rownames(PIPO_radius))
tail(testRad)
tail(testBAI)
testBAI <- melt(data = PIPO_BAI,id.vars = rownames(PIPO_BAI))
tail(testBAI)
PIPOgrlong <- data.frame(testBAI,testRad[,3])
head(PIPOgrlong)
PIPOtmp <- data.frame(tree_infoPIPO[,c("Band", "Pair", "Comp","Tag","Elev", "DBH", "Bark","BA_tot","in5_tot","N_Cr")],PIPO_BAI)
PIPOtmp[1:5,1:10]
PIPOtmp[1:5,1:20]
PIPO_BAIlong <- melt(data = PIPO_BAI,id.vars = list("Band", "Pair", "Comp","Tag","Elev", "DBH", "Bark","BA_tot","in5_tot","N_Cr"))
head(PIPO_BAIlong)
PIPO_BAIlong <- melt(data = PIPOtmp,id.vars = list("Band", "Pair", "Comp","Tag","Elev", "DBH", "Bark","BA_tot","in5_tot","N_Cr"))
PIPO_BAIlong <- melt(data = PIPOtmp,id.vars = c("Band", "Pair", "Comp","Tag","Elev", "DBH", "Bark","BA_tot","in5_tot","N_Cr"))
head(PIPO_BAIlong)
testRad <- melt(data=PIPO_radius, id.vars=rownames(PIPO_radius))
PIPOgrlong <- data.frame(PIPO_BAIlong,testRad[,3])
head(PIPOgrlong)
head(testRad)
testRad[1:10,3]
PIPOgrlong <- cbind(PIPO_BAIlong, testRad$value)
head(testRad)
head(PIPOgrlong)
colnames(PIPOgrlong) <-c("Band", "Pair", "Comp","Tag","Elev", "DBH", "Bark","BA_tot","in5_tot","N_Cr","Year","BAI","Rad")
head(PIPOgrlong)
plot(BAI~Rad, PIPOgrlong)
plot(BAI~Rad, PIPOgrlong, col=Band, pch=16)
FunMime <- function(params) {
params[1] * x / (params[1] + x)
}
# Create Ricker function
FunRicker <- function(params,x) {
params[1] * x * exp(-1*params[2] * x)
}
yL = PIPOgrlong$BAI[which(PIPOgrlong$Band=="L")]
xL = PIPOgrlong$Rad[which(PIPOgrlong$Band=="L")]
fitModelRick = nls(yL ~ a * xL * exp(-1*b*xL), start = list(a = 2, b = -2))
xL = PIPOgrlong$Rad[which(PIPOgrlong$Band=="L")]+10
min(xL)
min(xL, na.rm=T)
fitModelRick = nls(yL ~ a * xL * exp(-1*b*xL), start = list(a = 2, b = -2))
xs <- 1:200
ys <- FunRicker(c(2,-2), xs)
lines(ys~xs)
ys <- FunRicker(c(2,100), xs)
lines(ys~xs)
ys <- FunRicker(c(2,50), xs)
lines(ys~xs)
ys <- FunRicker(c(2,6000), xs)
lines(ys~xs)
ys <- FunRicker(c(20,6000), xs)
lines(ys~xs, col="red", lwd=4)
ys <- FunRicker(c(5000,6000), xs)
lines(ys~xs, col="red", lwd=4)
ys <- FunRicker(c(10000,6000), xs)
lines(ys~xs, col="red", lwd=4)
lines(ys~xs, col="blue", lwd=4)
fitModelRick = nls(yL ~ a * xL * exp(-1*b*xL), start = list(a = 50, b = 6000))
ys
exp(-1*200*150)
exp(-1*2*150)
exp(-1*.5*150)
exp(-1*.0005*150)
ys <- FunRicker(c(1000,.0001), xs)
ys
lines(ys~xs, col="blue", lwd=4)
ys <- FunRicker(c(100,.0001), xs)
lines(ys~xs, col="blue", lwd=4)
ys <- FunRicker(c(10,.0001), xs)
lines(ys~xs, col="blue", lwd=4)
fitModelRick = nls(yL ~ a * xL * exp(-1*b*xL), start = list(a = 10, b = 0.0001))
fitModelRick
paramsL = coef(fitModelL)
paramsL = coef(fitModelRick)
xs <- seq(1, 300,1)
y2L = FunRicker(paramsL, xs)
lines(y2L~xs, lwd=4, col="red")
fitModelRickL = nls(yL ~ a * xL * exp(-1*b*xL), start = list(a = 10, b = 0.0001))
paramsL = coef(fitModelRickL)
fitModelRickM = nls(yM ~ a * xM * exp(-1*b*xM), start = list(a = 10, b = 0.0001))
yM = PIPOgrlong$BAI[which(PIPOgrlong$Band=="M")]
xM = PIPOgrlong$Rad[which(PIPOgrlong$Band=="M")]+10
fitModelRickM = nls(yM ~ a * xM * exp(-1*b*xM), start = list(a = 10, b = 0.0001))
y2M = FunRicker(paramsM, xs)
paramsM = coef(fitModelRickM)
xs <- seq(1, 300,1)
y2M = FunRicker(paramsM, xs)
lines(y2M~xs, lwd=4, col="green")
yH = PIPOgrlong$BAI[which(PIPOgrlong$Band=="H")]
#yL[which(yL==0)] = 0.0000001 # won't take 0's
#yL[which(yL==1)] = .9999999 # won't take 1's
xH = PIPOgrlong$Rad[which(PIPOgrlong$Band=="H")]+10
fitModelRickH = nls(yH ~ a * xH * exp(-1*b*xH), start = list(a = 10, b = 0.0001))
# visualization code
# get the coefficients using the coef function
paramsH = coef(fitModelRickH)
xs <- seq(1, 300,1)
y2H = FunRicker(paramsH, xs)
lines(y2H~xs, lwd=4, col="grey")
quartz(width=6, height=4)
par(mfrow=c(1,2), mar=c(3.5,3.5,1,0), oma=c(0,0,0,1), mgp=c(2.5,1,0))
pch <- 16
# High competition
plot(POTR_BAI[which(POTRinfo$Band=="L"&POTRinfo$Comp=="H"),]~POTR_radius[which(POTRinfo$Band=="L"&POTRinfo$Comp=="H"),], col=pal[2], pch=pch, cex=.4, ylim=c(0,4500), ylab="Basal Area Increment", xlab="Radius (cm)")
points(POTR_BAI[which(POTRinfo$Band=="M"&POTRinfo$Comp=="H"),]~POTR_radius[which(POTRinfo$Band=="M"&POTRinfo$Comp=="H"),], col=pal[3], pch=pch, cex=.4)
points(POTR_BAI[which(POTRinfo$Band=="H"&POTRinfo$Comp=="H"),]~POTR_radius[which(POTRinfo$Band=="H"&POTRinfo$Comp=="H"),], col=pal[1], pch=pch, cex=.4)
mtext("High Competition",side = 3)
legend("topleft",legend = c("High", "Mid", "Low"),col = pal[c(1,3,2)],pch = pch, bty = "n",title = "Aspen")
#Low Comp
plot(POTR_BAI[which(POTRinfo$Band=="L"&POTRinfo$Comp=="L"),]~POTR_radius[which(POTRinfo$Band=="L"&POTRinfo$Comp=="L"),], col=pal[2], pch=pch, cex=.4, ylim=c(0,4500), ylab="Basal Area Increment", xlab="Radius (cm)")
points(POTR_BAI[which(POTRinfo$Band=="M"&POTRinfo$Comp=="L"),]~POTR_radius[which(POTRinfo$Band=="M"&POTRinfo$Comp=="L"),], col=pal[3], pch=pch, cex=.4)
points(POTR_BAI[which(POTRinfo$Band=="H"&POTRinfo$Comp=="L"),]~POTR_radius[which(POTRinfo$Band=="H"&POTRinfo$Comp=="L"),], col=pal[1], pch=pch, cex=.4)
mtext("Low Competition",side = 3)
quartz(width=6, height=4)
par(mfrow=c(1,2), mar=c(3.5,3.5,1,0), oma=c(0,0,0,1), mgp=c(2.5,1,0))
pch <- 16
# High competition
plot(PIPO_BAI[which(PIPOinfo$Band=="L"&PIPOinfo$Comp=="H"),]~PIPO_radius[which(PIPOinfo$Band=="L"&PIPOinfo$Comp=="H"),], col=pal[2], pch=pch, cex=.4, ylim=c(0,4500), ylab="Basal Area Increment", xlab="Radius (cm)")
points(PIPO_BAI[which(PIPOinfo$Band=="M"&PIPOinfo$Comp=="H"),]~PIPO_radius[which(PIPOinfo$Band=="M"&PIPOinfo$Comp=="H"),], col=pal[3], pch=pch, cex=.4)
points(PIPO_BAI[which(PIPOinfo$Band=="H"&PIPOinfo$Comp=="H"),]~PIPO_radius[which(PIPOinfo$Band=="H"&PIPOinfo$Comp=="H"),], col=pal[1], pch=pch, cex=.4)
mtext("High Competition",side = 3)
legend("topleft",legend = c("High", "Mid", "Low"),col = pal[c(1,3,2)],pch = pch, bty = "n",title = "Ponderosa")
#Low Comp
plot(PIPO_BAI[which(PIPOinfo$Band=="L"&PIPOinfo$Comp=="L"),]~PIPO_radius[which(PIPOinfo$Band=="L"&PIPOinfo$Comp=="L"),], col=pal[2], pch=pch, cex=.4, ylim=c(0,4500), ylab="Basal Area Increment", xlab="Radius (cm)")
points(PIPO_BAI[which(PIPOinfo$Band=="M"&PIPOinfo$Comp=="L"),]~PIPO_radius[which(PIPOinfo$Band=="M"&PIPOinfo$Comp=="L"),], col=pal[3], pch=pch, cex=.4)
points(PIPO_BAI[which(PIPOinfo$Band=="H"&PIPOinfo$Comp=="L"),]~PIPO_radius[which(PIPOinfo$Band=="H"&PIPOinfo$Comp=="L"),], col=pal[1], pch=pch, cex=.4)
mtext("Low Competition",side = 3)
locs <- read.csv("/Users/leeanderegg/Dropbox/TreeCoresRanges(Leander) (1)/WholeProjectCode/Locations.csv", header=T)
states <- unique(locs$State)
climates <- read.csv("/Users/leeanderegg/Dropbox/TreeCoresRanges(Leander) (1)/WholeProjectCode/MeanLocations_Normal_1961_1990MSY.csv", header=T)
climates2 <- read.csv("/Users/leeanderegg/Dropbox/TreeCoresRanges(Leander) (1)/WholeProjectCode/MeanLocations_Normal_1961_1990Y.csv", header=T)
require(RColorBrewer)
col <- brewer.pal (n=3, name="Set1")
cols <- rep(col, times=xtabs(~climates2$State))
sp <- c(rep(15,times=9), rep(16, times=9), rep(16, times=8))
totsnow <- (climates2$MAP * climates2$PAS)/1000
plot(Tmax_sm~Tmin_wt,data=climates2, col=cols, pch=sp)
legend("topright",legend=c("CO", "MT", "WA"),col=col, pch=15, xpd=F, horiz=T)
plot(MAT~MAP, data=climates2, col=cols, pch=sp, cex= (((climates2$Tmax_sm-climates2$Tmin_wt)-20.4)/16.1)*3)
legend("topleft",legend=c("CO", "MT", "WA"),col=col, pch=15, horiz=T)
plot(DD5~CMD, data=climates2, col=cols, pch=sp)
legend("topright",legend=c("CO", "MT", "WA"),col=col, pch=15, horiz=T)
summary(climates2[,1:8])
sp <- c(rep(15,times=9), rep(16, times=9), rep(17, times=8))
plot(Tmax_sm~Tmin_wt,data=climates2, col=cols, pch=sp)
legend("topright",legend=c("CO", "MT", "WA"),col=col, pch=15, xpd=F, horiz=T)
legend("topright",legend=c("CO", "MT", "WA"),col=col, pch=c(15,16,17), xpd=F, horiz=T)
plot(Tmin_wt~CMD, data=climates2, col=cols, pch=sp)
plot(PPT_wt~Tmax_sm, data=climates2, col=cols, pch=sp)
plot(PPT_wt~DD5, data=climates2,col=cols, pch=sp)
plot(PPT_wt~CMD, data=climates2, col=cols, pch=sp)
points(PPT_wt~CMD_sm, data=climates2, pch=sp)
plot(totsnow~DD5, data=climates2, pch=sp, col=cols)
plot(MAT~MAP, data=climates2, col=cols, pch=sp, cex= (((climates2$Tmax_sm-climates2$Tmin_wt)-20.4)/16.1)*3)
climates2$Tmax_sm-climates2$Tmin_wt
climates2$State
(climates2$Tmax_sm-climates2$Tmin_wt)-20.4)
climates2$Tmax_sm-climates2$Tmin_wt)-20.4
(climates2$Tmax_sm-climates2$Tmin_wt)-20.4
scale(climates2$Tmax_sm-climates2$Tmin_wt)
plot(MAT~MAP, data=climates2, col=cols, pch=sp, cex= scale(climates2$Tmax_sm-climates2$Tmin_wt)+2)#(((climates2$Tmax_sm-climates2$Tmin_wt)-20.4)/16.1)*3)
plot(MAT~MAP, data=climates2, col=cols, pch=sp, cex= scale(climates2$Tmax_sm-climates2$Tmin_wt)+2.5)#(((climates2$Tmax_sm-climates2$Tmin_wt)-20.4)/16.1)*3)
legend("topleft",legend=c("CO", "MT", "WA"),col=col, pch=c(15,16,17), horiz=T)
plot(MAT~MAP, data=climates2, col=cols, pch=15, cex= scale(climates2$Tmax_sm-climates2$Tmin_wt)+2.5)#(((climates2$Tmax_sm-climates2$Tmin_wt)-20.4)/16.1)*3)
plot(MAT~MAP, data=climates2, col=cols, pch=16, cex= scale(climates2$Tmax_sm-climates2$Tmin_wt)+2.5)#(((climates2$Tmax_sm-climates2$Tmin_wt)-20.4)/16.1)*3)
col <- paste(brewer.pal (n=3, name="Set1"), "88", sep="")
cols <- rep(col, times=xtabs(~climates2$State))
plot(MAT~MAP, data=climates2, col=cols, pch=16, cex= scale(climates2$Tmax_sm-climates2$Tmin_wt)+2.5)#(((climates2$Tmax_sm-climates2$Tmin_wt)-20.4)/16.1)*3)
col <- paste(brewer.pal (n=3, name="Set1"), "99", sep="")
cols <- rep(col, times=xtabs(~climates2$State))
plot(MAT~MAP, data=climates2, col=cols, pch=16, cex= scale(climates2$Tmax_sm-climates2$Tmin_wt)+2.5)#(((climates2$Tmax_sm-climates2$Tmin_wt)-20.4)/16.1)*3)
legend("topleft",legend=c("CO", "MT", "WA"),col=col, pch=c(15,16,17), horiz=T)
col <- paste(brewer.pal (n=3, name="Set1"), "AA", sep="")
cols <- rep(col, times=xtabs(~climates2$State))
plot(MAT~MAP, data=climates2, col=cols, pch=16, cex= scale(climates2$Tmax_sm-climates2$Tmin_wt)+2.5)#(((climates2$Tmax_sm-climates2$Tmin_wt)-20.4)/16.1)*3)
legend("topleft",legend=c("CO", "MT", "WA"),col=col, pch=c(15,16,17), horiz=T)
legend("topleft",legend=c("CO", "MT", "WA"),col=col, pch=16, horiz=T)
test <- read.table("https://www.try-db.org/tmpdnld/tde2015562383.txt")
test <- read.table("www.try-db.org/tmpdnld/tde2015562383.txt")
getwd()
test <- read.csv("/Users/leeanderegg/Dropbox/Trade-offs project/Workbook4.csv")
hist(test$X.2)
hist(test$X.2, breaks=30)
hist(test$X.2[which(test$X.2>10)], breaks=30)
hist(test$X.2[which(test$X.2>30)], breaks=30)
hist(test$X.2[which(test$X.2>90)], breaks=30)
length(test$X.2[which(test$X.2>90)])
length(test$X.2[which(test$X.2>30)])
test2 <- read.table("/Users/leeanderegg/Dropbox/Trade-offs project/TRY_WD_allentries.txt")
climates2[,c(1,2)]
climates2[,c("State", "SpeciesBand", "MAT", "MAP")]
plot(MAT~MAP, data=climates2, col=cols, pch=14+as.numeric(Species), cex= scale(climates2$Tmax_sm-climates2$Tmin_wt)+2.5)#(((climates2$Tmax_sm-climates2$Tmin_wt)-20.4)/16.1)*3)
